---
session: hri_safety_perception
init_cmd: |
  #exec /bin/bash
  cd @TMULE_CONFIG_DIR@ || true
  set -o pipefail
  function export_default () {
    var_name="$1"
    var_default="$2"
    eval $var_name="${!var_name:-$var_default}"
    export $var_name
    echo "  $0 -> $var_name=${!var_name}"
  }
  

  #########################################################################################
  # HUMAN-AWARE NAVIGATION
  export_default CATKIN_WORKSPACE_MAIN "$HOME/rasberry_ws"
  export_default CATKIN_WORKSPACE_AUX "$HOME/catkin_build_ws"	
  export_default CONFIG_DIRECT "$(rospack find mesapro)/config/" #directory of config file
  export_default AUDIO_DIRECT "$(rospack find mesapro)/audio/" #directory of audio files
  export_default CONDA_DIRECT "$HOME/anaconda3" # directory where conda or minicoda is installed 
  export_default CONDA_ENV "mypython3" #name of the conda environment with python3 
  export_default OPENPOSE_PYTHON "$CATKIN_WORKSPACE_MAIN/src/openpose/build/python" #assuming OpenPose is inside the RASBERRY_WS folder
  export_default OPENPOSE_MODELS "$CATKIN_WORKSPACE_MAIN/src/openpose/models"
  export_default POSTURE_CLASSIFIER_MODEL "$(rospack find mesapro)/config/classifier_model_3D_v2.joblib" #model of the human gesture classifier
  
  export_default VISUAL_MODE 3 # "3" means perception+topological navigation info is displayed
  export_default OPERATION_MODE "logistics" #it can be "logistics" or "UVC"
  export_default THERMAL_INFO true # "true" means use thermal information from FLIR camera
  export_default USE_BAG false #if "false", the real sensors are launched
  export_default USE_LEG_DETECTOR false #if "false", Lidar based leg_detector is not launched
  export_default IMAGE_ROTATION 270 # cameras orientation, it can be "0", "90", "180" or "270"
  ###########################################################################################

  # Set up ROS, robot and scenario configs, catkin_workspace, robot number:
  # Source ROS
  ##########################################################################################
  # source "/opt/ros/$(rosversion -d)/setup.bash"
  ##########################################################################################
 
  # Configure the development workspace (assuming we are in rasberry_bringup/tmule)
  ##########################################################################################
  #export_default CATKIN_WORKSPACE "`readlink -f ../../../.. || echo $HOME/rasberry_ws`"
  #source "$CATKIN_WORKSPACE/devel/setup.bash"
  #source $CATKIN_WORKSPACE_MAIN/devel/setup.bash
  #source $CATKIN_WORKSPACE_AUX/install/setup.bash --extend 
  ########################################################################################## 
  
  # Search for VPN tun device
  ##########################################################################################
  #export_default VPN_BASE_ADDR "10.8.0.0"
  #default_iface=`route -n | grep "^$VPN_BASE_ADDR" | tr -s " " |  cut -f8 -d" " || echo lo`
  ##########################################################################################
  default_ip=`ip addr show dev "$default_iface" | grep "inet " | sed 's@ *inet \([0-9\.]*\).*@\1@' || echo 127.0.0.1`
  # Set ROS_MASTER to the correct IP
  export_default ROS_MASTER $default_ip
  # Set ROS_IP not to the IP that we will connect to remotely
  export_default ROS_IP `ip route get $ROS_MASTER | grep "src" | sed 's/.*src \([0-9\.]*\).*/\1/' || echo $ROS_MASTER`
  # Set ROS_HOSTNAME to the ROS_IP to avoid configuring /etc/hosts for anyone who connects
  export_default ROS_HOSTNAME "$ROS_IP"
  export ROS_MASTER_URI="http://$ROS_MASTER:11311/"

##############################################################################################
windows:
- name: bag_files
  panes:
  - if $USE_BAG ; then roslaunch mesapro bags_data_rgbd_thermal.launch ; fi
  check: "rostopic list || ! $USE_BAG"
- name: rgbd_cameras
  panes:
  - sleep 5 ; if ! $USE_BAG ; then roslaunch mesapro rs_multiple_devices.launch ; fi
  cleck: "rostopic list | grep -q /camera1/color/image_raw || $USE_BAG"
- name: thermal_cameras
  panes:
  - if ! $USE_BAG ; then roslaunch mesapro flir_thermal_module.launch ; fi
  check: "rostopic list | grep -q /flir_module_driver1/thermal/image_raw || $USE_BAG"
- name: hri_cameras_perception
  panes:
  - roslaunch mesapro hri_camera_detector.launch openpose_python:=$OPENPOSE_PYTHON openpose_models:=$OPENPOSE_MODELS posture_classifier_model:=$POSTURE_CLASSIFIER_MODEL thermal_info:=$THERMAL_INFO image_rotation:=$IMAGE_ROTATION
  - rosrun mesapro human_perception_system.py 
  check: "rostopic list | grep -q /human_info_camera " 
- name: hri_safety_system
  panes:
  - roslaunch mesapro hri_safety_system.launch audio_direct:=$AUDIO_DIRECT operation_mode:=$OPERATION_MODE
  check: "rostopic list | grep -q /human_safety_info"
- name: hri_visualization
  panes:
  - roslaunch mesapro hri_visualization.launch visual_mode:=$VISUAL_MODE  config_direct:=$CONFIG_DIRECT image_rotation:=$IMAGE_ROTATION thermal_info:=$THERMAL_INFO
#############################################################################################

