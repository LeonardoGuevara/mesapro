---
session: robot
init_cmd: |
  #exec /bin/bash
  cd @TMULE_CONFIG_DIR@ || true
  set -o pipefail
  function export_default () {
    var_name="$1"
    var_default="$2"
    eval $var_name="${!var_name:-$var_default}"
    export $var_name
    echo "  $0 -> $var_name=${!var_name}"
  }

  
  #############################################################################################
  # HUMAN-AWARE NAVIGATION PARAMETERS
  export_default CATKIN_WORKSPACE "$HOME/rasberry_ws"
  export_default CONFIG_DIRECT "$(rospack find mesapro)/config/" #directory of mesapro config file
  export_default TIME_WITHOUT_MSG 5 # maximum time without receiving safety or human perception or teleoperation messages, in seconds
  export_default USE_HAN true # if "false", safety system actions are not used for the navigation.py or in_row_trav.py 
  ##############################################################################################
  # Source ROS
  # source "/opt/ros/$(rosversion -d)/setup.bash"
  source $CATKIN_WORKSPACE/devel/setup.bash
  #################################################################################################
  # Load system-specific config file
  if [ -r "$HOME/.rasberryrc" ]; then echo "*** loading $HOME/.rasberryrc" ; source "$HOME/.rasberryrc"; fi
  
  if [ -r "$HOME/.treatmentrc" ]; then echo "*** loading $HOME/.treatmentrc" ; source "$HOME/.treatmentrc"; fi
  ################################################################################################## To launch tmule file outside /rasberry_bringup/tmule  
  # Load env variables for robots and scenario 
  #export_default BASE_CONFIG_DIR `readlink -f . || echo .`
  export_default BASE_CONFIG_DIR "$(rospack find rasberry_bringup)/tmule"
  ##################################################################################################
  export_default ROBOT_NAME `hostname | tr "-" "_" | tr "." "_"`
  export_default SCENARIO_NAME "default"
  # Load robot-specific config file
  if [ -r "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh" ]; then echo "*** loading $BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh" ; source "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh"; fi
  # Load scenario-specific config file
  if [ -r "$BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh" ]; then echo "*** loading $BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh" ; source "$BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh"; fi  
  
  ################################################################################################ CHANGING ROS_MASTER AND ROS_IP
  # Search for VPN tun device
  #export_default VPN_BASE_ADDR "10.8.0.0"
  #default_iface=`route -n | grep "^$VPN_BASE_ADDR" | tr -s " " |  cut -f8 -d" " || echo lo`
  #default_ip=`ip addr show dev "$default_iface" | grep "inet " | sed 's@ *inet \([0-9\.]*\).*@\1@' || echo 127.0.0.1`
  # Set ROS_MASTER to the correct IP
  #export_default ROS_MASTER $default_ip
  # Set ROS_IP not to the IP that we will connect to remotely
  #export_default ROS_IP `ip route get $ROS_MASTER | grep "src" | sed 's/.*src \([0-9\.]*\).*/\1/' || echo $ROS_MASTER`
  # Set ROS_HOSTNAME to the ROS_IP to avoid configuring /etc/hosts for anyone who connects
  #export_default ROS_HOSTNAME "$ROS_IP"
  #export ROS_MASTER_URI="http://$ROS_MASTER:11311/"
  
  #export_default ROS_IP "192.168.0.101" #NUC IP address, using ethernet
  #export_default ROS_MASTER "192.168.0.101" #NUC IP address, as MASTER
  export_default ROS_IP "10.101.12.112" #NUC IP address, using wifi
  export_default ROS_MASTER "10.101.12.112" #NUC IP address, as MASTER
  export ROS_MASTER_URI="http://$ROS_MASTER:11311/"
  export ROS_IP=$ROS_IP  
  ################################################################################################
  
  # Figure out the robot number from the hostname, assuming it is like `thorvald-XXX`
  export_default ROBOT_NO `hostname | cut -f2 -d"-"`

  # Site details and site specific configs:
  # Used to retrieve site and task specific config files
  export_default FARM_NAME "riseholme"
  export_default FIELD_NAME "polytunnel"
  export_default APPLICATION "uv"
  export_default RES_ROBOT_TYPE ""

  # Config Paths
  export_default DEFAULT_PATH "$(rospack find rasberry_bringup)/config/site_files/default_farm/default_field"
  export_default SITE_PATH "$(rospack find rasberry_bringup)/config/site_files/${FARM_NAME}/${FIELD_NAME}"
  # Site details
  export_default DATUM_FILE "${SITE_PATH}/datum.yaml"
  export_default METRIC_MAP "${SITE_PATH}/map.yaml"
  export_default NOGO_MAP "${SITE_PATH}/nogo_map.yaml"
  export_default TMAP_FILE "${SITE_PATH}/${APPLICATION}/tmap.tmap2"
  export_default POLE_POSITIONS "${SITE_PATH}/poles.yaml"
  export_default POLE_LIKELIHOOD_FIELD "${SITE_PATH}/likelihood_field_poles.yaml"
  export_default DOCK_FILE "${SITE_PATH}/dock.yaml"

  # Config defaults
  export_default ROW_CHANGE_CONFIG "${DEFAULT_PATH}/row_change_cfg.yaml"
  # Application specific config defaults
  export_default ROW_TRAVERSAL_CONFIG "${DEFAULT_PATH}/${APPLICATION}/row_traversal_cfg.yaml"
  export_default ROW_DETECTOR_CONFIG_COMMON "${DEFAULT_PATH}/${APPLICATION}/row_detector_common_cfg.yaml"
  export_default ROW_DETECTOR_CONFIG_ELLIPSE "${DEFAULT_PATH}/${APPLICATION}/row_detector_ellipse_cfg.yaml"

  # set the robot type
  export_default ROBOT_TYPE "thorvald_ii_4wd4ws_slim"

  # Communication related
  export_default ROSBRIDGE_IP "10.8.0.18"
  export_default ROSBRIDGE_PORT "9090"

  # Path where to expect MONGODB
  export_default MONGO_PATH "$HOME/mongodb"

  # robot can interfaces
  export_default CAN_INTERFACE_TYPE "enc_pcb_v1rev6"
  export_default CAN_INTERFACE_NAME "/dev/ttyUSB0"

  # joystick/gamepad device
  export_default JOY_DEV "/dev/input/js1"
  export_default TELEOP_CONTROLLER "xbox_one"

  # Robot footprint
  export_default ROBOT_FOOTPRINT "$(rospack find rasberry_move_base)/config/footprints/robot_${ROBOT_NO}_footprint.yaml"

  # Lidars
  export_default LIDAR_TYPE_FRONT umt30lxew
  export_default LIDAR_TYPE_BACK umt30lxew
  export_default LIDAR_TYPE_TOP os1
  export_default FILTER_LASERSCAN false

  # Use IMU?
  export_default USE_IMU false
  export_default UM7_IMU_PORT /dev/ttyUSB1
  export_default USE_XSENS false
  export_default USE_TOP_LASER false

  # Use RTK_GNSS?
  export_default GNSS_TYPE ""
  export_default USE_RTK false
  export_default RTK_IP "192.168.0.50"
  export_default RTK_PORT "21098"
  export_default USE_GNSS_FENCE false
  export_default GNSS_INS_ACTIVATED false

  # Localisation
  export_default EKF_PUBLISH_TF false
  export_default USE_OMNI true

  # Use MEL? For localisation quality topic and/or gps-lidar fusion
  # Set USE_MEL=true and FUSE_GPS=false to run amcl and publish quality
  export_default USE_MEL false
  export_default FUSE_GPS false
  export_default USE_GPS_ONLY false
  export_default THREE_D_LOCALISATION false

  # Navigation
  export_default USE_CARROT false
  export_default USE_ROW_CHANGE_ACTION false
  export_default USE_DOCKING false
  export_default USE_WHYCON_DOCK false
  export_default USE_TEB_PLANNER false
  export_default RECONF_EDGES true
  export_default USE_RESTRICTIONS true

  # Simulation
  export_default USE_SIM false
  export_default GAZEBO_WORLD_PATH "${SITE_PATH}/gazebo_world.world"
  export_default INCLUDE_PLANTS false
  export_default USE_GUI false
  export_default ROBOT_POS_X 0.0
  export_default ROBOT_POS_Y 0.0
  export_default ROBOT_POS_A 0.0

  # Monitoring
  export_default STARTUP_SENTOR false
  if $USE_SIM; 
    then export_default SENTOR_CONFIG "${DEFAULT_PATH}/sentor_sim.yaml";
    else export_default SENTOR_CONFIG "${DEFAULT_PATH}/sentor.yaml";
  fi
  export_default STARTUP_SLACKEROS false

  ################################################################################################# To show the pose of the critical human detected
  #export_default RVIZ_CONFIG $(rospack find rasberry_bringup)/resources/row_traversal_action.rviz
  export_default RVIZ_CONFIG $(rospack find mesapro)/config/row_traversal_action_sim.rviz
  #################################################################################################

  
  # Home GUI
  export_default USE_HOME_GUI false
# tags: core, nav
windows:
- name: roscore
  panes:
  - roslaunch rasberry_bringup roscore.launch use_sim:=$USE_SIM
  check: "rostopic list"
  tags: [core, nav, graspberry]
- name: init
  panes:
  - mkdir -p "$MONGO_PATH" && roslaunch mongodb_store mongodb_store.launch db_path:=$MONGO_PATH
  - if [ -r "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.yaml" ]; then rosparam load "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.yaml"; fi
  - if ! [ -r "$ROBOT_FOOTPRINT" ]; then roslaunch rasberry_bringup update_footprint_from_robot_config.launch robot_no:=$ROBOT_NO; fi
  - rosparam set /scenario_info/farm_name $FARM_NAME ; rosparam set /scenario_info/field_name $FIELD_NAME; rosparam set /scenario_info/application $APPLICATION
  check: "rosservice list | grep -q message_store"
  tags: [core, nav]
################################################################################################### For thorvald_014, "extras.xacro" is replaced by "sensors.xacro"
- name: robot
  panes:
  - roslaunch rasberry_bringup robot_bringup.launch robot_model:=$(rospack find rasberry_bringup)/config/robots/robot_$ROBOT_NO.yaml model_extras:=$(rospack find rasberry_bringup)/urdf/robot_${ROBOT_NO}_sensors.xacro datum_file:="$DATUM_FILE" ekf_publish_tf:="$EKF_PUBLISH_TF" simple_sim:=$USE_SIM with_teleoperation:=True teleop_controller_type:=$TELEOP_CONTROLLER teleop_controller:=$(rospack find thorvald_teleop)/config/$TELEOP_CONTROLLER.yaml joy_dev:=$JOY_DEV world:=$GAZEBO_WORLD_PATH with_gui:=$USE_GUI start_pose_x:=$ROBOT_POS_X start_pose_y:=$ROBOT_POS_Y start_pose_Y:=$ROBOT_POS_A include_plants:=$INCLUDE_PLANTS can_interface_type:=$CAN_INTERFACE_TYPE can_interface_name:=$CAN_INTERFACE_NAME
  check: "rostopic list | grep -q -e base_state"
  tags: [core, nav]
################################################################################################## For thorvald_014, "laser_box_filter_from_tf_tree.launch" comes from rasberry_bringup instead of rasberry_navigation
- name: lidars_bringup
  panes:
  - if ! $USE_SIM; then roslaunch rasberry_bringup rasberry_lidar.launch lidar_type:="$LIDAR_TYPE_FRONT" position:="front" ip_address:="192.168.0.11"; fi
  - if ! $USE_SIM; then roslaunch rasberry_bringup rasberry_lidar.launch lidar_type:="$LIDAR_TYPE_BACK" position:="back"  ip_address:="192.168.0.10"; fi
  - if ! $USE_SIM && $USE_TOP_LASER; then roslaunch rasberry_bringup rasberry_lidar.launch lidar_type:="$LIDAR_TYPE_TOP" ip_address:="192.168.0.12"; fi
  - if $FILTER_LASERSCAN; then roslaunch rasberry_bringup laser_box_filter_from_tf_tree.launch robot_no:=$ROBOT_NO; fi
  check: "[ -r ~/.cache/laser_filter_robot_${ROBOT_NO}.yaml ] || ! $FILTER_LASERSCAN"
#  check: if ! $USE_SIM; then "rostopic list | grep -q -e scanner_front/scan -e scanner_back/scan"; fi
  tags: [core, nav]
#####################################################################################################
- name: sensors_bringup
  panes:
  - if ! $USE_SIM && $USE_IMU; then roslaunch rasberry_bringup rasberry_imu.launch use_imu:="$USE_IMU" um7_imu_port:="$UM7_IMU_PORT" use_xsens:="$USE_XSENS"; fi
  - if ! $USE_SIM && $USE_RTK; then roslaunch rasberry_bringup rasberry_gnss.launch rtk_ip:="$RTK_IP" rtk_port:="$RTK_PORT" gnss_type:="$GNSS_TYPE" ins_activated:=$GNSS_INS_ACTIVATED; fi
#  check: if ! $USE_SIM; then "rostopic list | grep -q -e gps/fix"; fi
  tags: [core, nav]
- name: localisation_prelims
  panes:
  - roslaunch rasberry_navigation map_server.launch map:="$METRIC_MAP" use_no_go_map:=true no_go_map:=$NOGO_MAP
  - roslaunch rasberry_bringup corner_lasers_merger.launch filter_laserscan:=$FILTER_LASERSCAN robot_no:=$ROBOT_NO
  check: "rostopic list | grep -q /map"
  tags: [nav, site]
- name: localisation
  panes:
  - if ! $USE_MEL; then roslaunch rasberry_navigation rasberry_localisation.launch publish_tf:="$EKF_PUBLISH_TF" use_omni:="$USE_OMNI" use_sim:="$USE_SIM" initial_pose_x:=$ROBOT_POS_X initial_pose_y:=$ROBOT_POS_Y initial_pose_a:=$ROBOT_POS_A; fi
  - if $USE_MEL; then roslaunch mel_amcl rasberry_localisation.launch fuse_gps:="$FUSE_GPS" use_gps_only:="$USE_GPS_ONLY" ekf_publish_tf:="$EKF_PUBLISH_TF" datum_file:="$DATUM_FILE" use_gnss_fence:="$USE_GNSS_FENCE" three_d:=$THREE_D_LOCALISATION initial_pose_x:=$ROBOT_POS_X initial_pose_y:=$ROBOT_POS_Y initial_pose_a:=$ROBOT_POS_A use_sim:=$USE_SIM; fi
  check: "rosservice list | egrep -q 'ekf_map|amcl'"
  tags: [nav, site]
- name: topo_map
  panes:
  - 'rostopic pub /type std_msgs/String "data: $RES_ROBOT_TYPE"'
  - roslaunch rasberry_navigation topological_map_manager2_central.launch tmap_file:=$TMAP_FILE use_restrictions:=$USE_RESTRICTIONS
  check: "rostopic list | grep -q /topological_map_2"
  tags: [nav]
############################################################################################ launching modified scripts from mesapro package
- name: topo_nav
  panes:
  - if ! $USE_TEB_PLANNER; then roslaunch mesapro topological_navigation_robot.launch move_base_planner:=move_base/DWAPlannerROS reconfigure_edges:=$RECONF_EDGES use_restrictions:=$USE_RESTRICTIONS time_without_msg:=$TIME_WITHOUT_MSG use_han:=$USE_HAN; else roslaunch mesapro topological_navigation_robot.launch move_base_planner:=move_base/TebLocalPlannerROS reconfigure_edges:=$RECONF_EDGES use_restrictions:=$USE_RESTRICTIONS time_without_msg:=$TIME_WITHOUT_MSG use_han:=$USE_HAN; fi
  check: "rosservice list | grep -q topological_navigation"
  tags: [nav, site]
- name: nav_actions
  panes:
  - if ! $USE_TEB_PLANNER; then roslaunch rasberry_move_base move_base_dwa.launch use_carrot_planner:=$USE_CARROT use_omni:="$USE_OMNI" robot_no:=$ROBOT_NO robot_footprint:=$ROBOT_FOOTPRINT; else roslaunch rasberry_move_base move_base_teb.launch use_carrot_planner:=$USE_CARROT use_omni:="$USE_OMNI" robot_no:=$ROBOT_NO; fi
  - roslaunch mesapro row_traversal.launch use_gps_only:="$USE_GPS_ONLY" detector_config_common:="$ROW_DETECTOR_CONFIG_COMMON" detector_config_ellipse:="$ROW_DETECTOR_CONFIG_ELLIPSE" traversal_config:="$ROW_TRAVERSAL_CONFIG" pole_positions:=$POLE_POSITIONS pole_likelihood_field:=$POLE_LIKELIHOOD_FIELD use_restrictions:=$USE_RESTRICTIONS site_path:=$SITE_PATH robot_type:=$RES_ROBOT_TYPE task:=$APPLICATION time_without_msg:=$TIME_WITHOUT_MSG config_direct:=$CONFIG_DIRECT use_han:=$USE_HAN
  - if $USE_HAN ; roslaunch mesapro hri_footpath_gesture_control.launch time_without_msg:=$TIME_WITHOUT_MSG config_direct:=$CONFIG_DIRECT; fi
  check: "rosrun dynamic_reconfigure dynparam list | grep row_traversal"
  tags: [nav, site]
########################################################################################  for thorvald-014, sentor.launch comes from rasberry_uv instead of rasberry_core
- name: localisation_prelims_aditional
  panes:
  - roslaunch rasberry_bringup corner_lasers_merger.launch
- name: rviz
  panes:
  - if ! $USE_HOME_GUI; then DISPLAY=:0 rviz -d $RVIZ_CONFIG; fi
  tags: [nav, graspberry, site]
- name: monitoring
  panes:
  - if $STARTUP_SENTOR; then roslaunch rasberry_uv sentor.launch config_file:=$SENTOR_CONFIG auto_safety_tagging:=true ; fi
  - roslaunch rasberry_monitors system_monitors.launch
  - roslaunch toc robot.launch
  - if [ "$SLACK_WEBHOOK" ] && $STARTUP_SLACKEROS; then roslaunch slackeros slackeros.launch webhook:="$SLACK_WEBHOOK" topics:="/sentor/event" loggers:="/rosout:error"; else cat; fi
  tags: [monitoring, site]
########################################################################################
- name: debug
  panes:
  - ls
  skip: true

