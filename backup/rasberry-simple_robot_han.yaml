---
session: robot
init_cmd: |
  #exec /bin/bash
  cd @TMULE_CONFIG_DIR@ || true
  set -o pipefail
  function export_default () {
    var_name="$1"
    var_default="$2"
    eval $var_name="${!var_name:-$var_default}"
    export $var_name
    echo "  $0 -> $var_name=${!var_name}"
  }

  # Source ROS
  source "/opt/ros/$(rosversion -d)/setup.bash"

  # Load robot-specific config file
  if [ -r "$HOME/.rasberryrc" ]; then echo "*** loading $HOME/.rasberryrc" ; source "$HOME/.rasberryrc"; fi
  
  export_default BASE_CONFIG_DIR `readlink -f . || echo .`
  export_default ROBOT_NAME `hostname | tr "-" "_" | tr "." "_"`
  export_default SCENARIO_NAME "default"
  # Load robot-specific config file
  if [ -r "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh" ]; then echo "*** loading $BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh" ; source "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh"; fi
  # Load scenario-specific config file
  if [ -r "$BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh" ]; then echo "*** loading $BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh" ; source "$BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh"; fi  
  # Configure the development workspace (assuming we are in rasberry_bringup/tmule)
  export_default CATKIN_WORKSPACE "`readlink -f ../../../.. || echo $HOME/rasberry_ws`"
  source "$CATKIN_WORKSPACE/devel/setup.bash"

  export_default VPN_BASE_ADDR "10.8.0.0"

  # search for VPN tun device:
  default_iface=`route -n | grep "^$VPN_BASE_ADDR" | tr -s " " |  cut -f8 -d" " || echo lo`
  default_ip=`ip addr show dev "$default_iface" | grep "inet " | sed 's@ *inet \([0-9\.]*\).*@\1@' || echo 127.0.0.1`

  # Set ROS_MASTER to the correct IP
  export_default ROS_MASTER $default_ip
  # Set ROS_IP not to the IP that we will connect to remotely
  export_default ROS_IP `ip route get $ROS_MASTER | grep "src" | sed 's/.*src \([0-9\.]*\).*/\1/' || echo $ROS_MASTER`
  # Set ROS_HOSTNAME to the ROS_IP to avoid configuring /etc/hosts for anyone who connects
  export_default ROS_HOSTNAME "$ROS_IP"

  export ROS_MASTER_URI="http://$ROS_MASTER:11311/"
  export_default ROSBRIDGE_IP "10.8.0.18"
  export_default ROSBRIDGE_PORT "9090"

  # Path where to expect MONGODB
  export_default MONGO_PATH "$HOME/mongodb"

  # robot can interfaces
  export_default CAN_INTERFACE_TYPE "enc_pcb_v1rev6"
  export_default CAN_INTERFACE_NAME "/dev/ttyUSB0"

  # Figure out the robot number from the hostname, assuming it is like `thorvald-XXX`
  export_default ROBOT_NO `hostname | cut -f2 -d"-"`

  # Set the robot type
  export_default ROBOT_TYPE "thorvald_ii_4wd4ws_slim"

  # joystick/gamepad device
  export_default JOY_DEV "/dev/input/js1"
  export_default TELEOP_CONTROLLER "xbox_one"

  # Robot footprint
  export_default ROBOT_FOOTPRINT "$(rospack find rasberry_move_base)/config/footprints/robot_${ROBOT_NO}_footprint.yaml"

  # Simulation
  export_default USE_SIM false
  export_default GAZEBO_WORLD_PATH "$(rospack find rasberry_gazebo)/worlds/riseholme.world"
  export_default INCLUDE_PLANTS false
  export_default USE_GUI false
  export_default ROBOT_POS_X 20.2
  export_default ROBOT_POS_Y 4.6
  export_default ROBOT_POS_A 3.14159

  # Lidars
  export_default LIDAR_TYPE_FRONT umt30lxew
  export_default LIDAR_TYPE_BACK umt30lxew

  # Use IMU?
  export_default USE_IMU false
  export_default UM7_IMU_PORT /dev/ttyUSB1
  export_default USE_XSENS false

  # Use RTK_GNSS?
  export_default USE_RTK false
  export_default RTK_IP "192.168.0.50"
  export_default RTK_PORT "21098"
  export_default USE_GNSS_FENCE false

  # Localisation
  export_default EKF_PUBLISH_TF false
  export_default USE_OMNI true

  # Use MEL? For localisation quality topic and/or gps-lidar fusion
  # Set USE_MEL=true and FUSE_GPS=false to run amcl and publish quality
  export_default USE_MEL false
  export_default FUSE_GPS false
  export_default USE_GPS_ONLY false

  # Navigation
  export_default USE_CARROT false
  export_default USE_ROW_CHANGE_ACTION false
  export_default USE_DOCKING false
  export_default USE_WHYCON_DOCK false
  export_default POLE_POSITIONS ""
  export_default USE_TEB_PLANNER false
  export_default RECONF_EDGES false

  # Used to retrieve site and task specific config files
  export_default FARM_NAME "riseholme"
  export_default FIELD_NAME "polytunnel"
  export_default APPLICATION "uv"

  # Config Paths
  export_default DEFAULT_PATH "$(rospack find rasberry_bringup)/config/site_files/default_farm/default_field"
  export_default SITE_PATH "$(rospack find rasberry_bringup)/config/site_files/${FARM_NAME}/${FIELD_NAME}"
  # Site details
  export_default DATUM_FILE ""
  export_default METRIC_MAP ""
  export_default NOGO_MAP ""
  export_default TMAP_FILE ""
  export_default POLE_POSITIONS ""
  export_default DOCK_FILE ""
  # Config defaults
  export_default ROW_CHANGE_CONFIG "${DEFAULT_PATH}/row_change_cfg.yaml"
  # Application specific config defaults
  export_default ROW_TRAVERSAL_CONFIG "${DEFAULT_PATH}/${APPLICATION}/row_traversal_cfg.yaml"
  export_default ROW_DETECTOR_CONFIG_COMMON "${DEFAULT_PATH}/${APPLICATION}/row_detector_common_cfg.yaml"
  export_default ROW_DETECTOR_CONFIG_ELLIPSE "${DEFAULT_PATH}/${APPLICATION}/row_detector_ellipse_cfg.yaml"

  # Monitoring
  export_default STARTUP_SENTOR false
  export_default SENTOR_CONFIG "$(rospack find rasberry_bringup)/config/sentor.yaml"
  export_default STARTUP_SLACKEROS false

  export_default RVIZ_CONFIG $(rospack find rasberry_bringup)/resources/row_traversal_action.rviz

  export_default DATA_COLLECTION_SERVER false
  export_default DATA_SCENARIO "$(rospack find rasberry_data_collection)/scenarios/framos_cameras.yaml"

  # ARGS BELOW ARE PARTICULAR FOR STRAWBERRY HARVESTING
  export_default GRASPBERRY_ROBOT false

  # Planning
  export_default PLANNING_DEBUG true
  export_default TOPIC_INTERFACE true

 
# tags: core, nav
windows:
- name: roscore
  panes:
  - roslaunch rasberry_bringup roscore.launch use_sim:=$USE_SIM
  check: "rostopic list"
  tags: [core, nav]
- name: init
  panes:
  - mkdir -p "$MONGO_PATH" && roslaunch mongodb_store mongodb_store.launch db_path:=$MONGO_PATH
  - if [ -r "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.yaml" ]; then rosparam load "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.yaml"; fi
  - if ! [ -r "$ROBOT_FOOTPRINT" ]; then roslaunch rasberry_bringup update_footprint_from_robot_config.launch robot_no:=$ROBOT_NO; fi
  check: "rosservice list | grep -q message_store"
  tags: [core, nav]
######################################################################## without teleoperation
- name: robot
  panes:
  - roslaunch rasberry_bringup robot_bringup.launch robot_model:=$(rospack find rasberry_bringup)/config/robots/robot_$ROBOT_NO.yaml model_extras:=$(rospack find rasberry_bringup)/urdf/robot_${ROBOT_NO}_sensors.xacro datum_file:="$DATUM_FILE" ekf_publish_tf:="$EKF_PUBLISH_TF" simple_sim:=$USE_SIM with_teleoperation:=false teleop_controller:=$(rospack find thorvald_teleop)/config/$TELEOP_CONTROLLER.yaml joy_dev:=$JOY_DEV world:=$GAZEBO_WORLD_PATH with_gui:=$USE_GUI start_pose_x:=$ROBOT_POS_X start_pose_y:=$ROBOT_POS_Y start_pose_Y:=$ROBOT_POS_A include_plants:=$INCLUDE_PLANTS can_interface_type:=$CAN_INTERFACE_TYPE can_interface_name:=$CAN_INTERFACE_NAME
  check: "rostopic list | grep -q -e base_state"
  tags: [core, nav]
###################################################################################
- name: sensors_bringup
  panes:
  - if ! $USE_SIM; then roslaunch rasberry_bringup rasberry_lidar.launch lidar_type:="$LIDAR_TYPE_FRONT" position:="front" ip_address:="192.168.0.11"; fi
  - if ! $USE_SIM; then roslaunch rasberry_bringup rasberry_lidar.launch lidar_type:="$LIDAR_TYPE_BACK" position:="back"  ip_address:="192.168.0.10"; fi
 
  - if $USE_RTK; then roslaunch rasberry_navigation dual_septentrio_gps.launch rtk_ip:="$RTK_IP" rtk_port:="$RTK_PORT"; fi

  tags: [core, nav]
################################################################################### the second pane is launched in another window at the end
- name: localisation_prelims
  panes:
  - roslaunch rasberry_navigation map_server.launch map:="$METRIC_MAP" use_no_go_map:=true no_go_map:=$NOGO_MAP
  check: "rostopic list | grep -q /map"
  tags: [nav]
####################################################################################
- name: localisation
  panes:
  - if ! $USE_MEL; then roslaunch rasberry_navigation rasberry_localisation.launch publish_tf:="$EKF_PUBLISH_TF" use_omni:="$USE_OMNI" use_sim:="$USE_SIM" initial_pose_x:=$ROBOT_POS_X initial_pose_y:=$ROBOT_POS_Y initial_pose_a:=$ROBOT_POS_A; fi
  - if $USE_MEL; then roslaunch mel_amcl rasberry_localisation.launch fuse_gps:="$FUSE_GPS" use_gps_only:="$USE_GPS_ONLY" ekf_publish_tf:="$EKF_PUBLISH_TF" datum_file:="$DATUM_FILE" use_gnss_fence:="$USE_GNSS_FENCE" initial_pose_x:=$ROBOT_POS_X initial_pose_y:=$ROBOT_POS_Y initial_pose_a:=$ROBOT_POS_A; fi
  check: "rosservice list | egrep -q 'ekf_map|amcl'"
  tags: [nav]
- name: topo_map
  panes:
  - roslaunch rasberry_navigation topological_map_manager_central.launch tmap_file:=$TMAP_FILE
  check: "rostopic list | grep -q /topological_map"
  tags: [nav]
#############################################################################################
- name: topo_nav
  panes:
  - if ! $USE_TEB_PLANNER; then roslaunch mesapro topological_navigation_robot.launch move_base_reconf_service:=DWAPlannerROS move_base_planner:=move_base/DWAPlannerROS use_omni:="$USE_OMNI" farm_name:="$FARM_NAME" field_name:="$FIELD_NAME" application:="$APPLICATION" reconfigure_edges:="$RECONF_EDGES"; else roslaunch rasberry_navigation topological_navigation_robot.launch move_base_reconf_service:=TebLocalPlannerROS move_base_planner:=move_base/TebLocalPlannerROS use_omni:="$USE_OMNI" farm_name:="$FARM_NAME" field_name:="$FIELD_NAME" application:="$APPLICATION" reconfigure_edges:="$RECONF_EDGES"; fi
  check: "rosservice list | grep -q topological_navigation"
  tags: [nav]
- name: nav_actions
  panes:
  - if ! $USE_TEB_PLANNER; then roslaunch rasberry_move_base move_base_dwa.launch use_carrot_planner:=$USE_CARROT use_omni:="$USE_OMNI" robot_no:=$ROBOT_NO robot_footprint:=$ROBOT_FOOTPRINT; else roslaunch rasberry_move_base move_base_teb.launch use_carrot_planner:=$USE_CARROT use_omni:="$USE_OMNI" robot_no:=$ROBOT_NO; fi
  - roslaunch mesapro row_traversal.launch detector_config_common:="$ROW_DETECTOR_CONFIG_COMMON" detector_config_ellipse:="$ROW_DETECTOR_CONFIG_ELLIPSE" traversal_config:="$ROW_TRAVERSAL_CONFIG" pole_positions:=$POLE_POSITIONS
  check: "rosrun dynamic_reconfigure dynparam list | grep row_traversal"
  tags: [nav]
###################################################################################
- name: human_perception
  panes:
  - rostopic pub /hedge_pos_a marvelmind_nav/hedge_pos_a -- '1' '0' '7.9' '4.6' '0.0' '0'
  - rostopic pub /hedge_pos_a marvelmind_nav/hedge_pos_a -- '2' '0' '7.5' '-2' '0.0' '0'
  - rosrun rasberry_people_perception simple_marvel_localiser.py
  - roslaunch mesapro ds4_driver.launch
  - rosrun mesapro virtual_picker_simulation.py
- name: safety_system
  panes:
  - |
     cd /home/leo/rasberry_ws/src/mesapro/src/human_safety/
     python human_safety_system.py
- name: localisation_prelims_aditional
  panes:
  - roslaunch rasberry_bringup corner_lasers_merger.launch
#############################################################################################
- name: rviz
  panes:
  - DISPLAY=:0 rviz -d $RVIZ_CONFIG
  tags: [nav, graspberry]
- name: monitoring
  panes:
  - if $STARTUP_SENTOR; then roslaunch rasberry_uv sentor.launch config_file:=$SENTOR_CONFIG auto_safety_tagging:=true ; fi
  - roslaunch rasberry_monitors system_monitors.launch
  - roslaunch toc robot.launch
  - if [ "$SLACK_WEBHOOK" ] && $STARTUP_SLACKEROS; then roslaunch slackeros slackeros.launch webhook:="$SLACK_WEBHOOK" topics:="/sentor/event" loggers:="/rosout:error"; else cat; fi
  tags: [monitoring]
- name: debug
  panes:
  - ls
  skip: true

